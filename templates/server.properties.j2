##
# {{ ansible_managed }}

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
# If left off one is auto-assigned
{% if sansible_kafka_aws_cluster_autodiscover_data is defined %}
broker.id={{ sansible_kafka_aws_cluster_autodiscover_data_id }}
{% else %}
broker.id={{ sansible_kafka_id }}
{% endif %}

# Graceful shutdown. True to enable
controlled.shutdown.enable={{ sansible_kafka_controlled_shutdown_enable }}
controlled.shutdown.max.retries={{ sansible_kafka_controlled_shutdown_max_retries }}
controlled.shutdown.retry.backoff.ms={{ sansible_kafka_controlled_shutdown_retry_backoff_ms }}

############################# Socket Server Settings #############################

# Hostname the broker will bind to. If not set, the server will bind to all interfaces
{% if sansible_kafka_listen_address is defined %}
listeners=PLAINTEXT://{{ sansible_kafka_listen_address }}:{{ sansible_kafka_port }}
{% else %}
listeners=PLAINTEXT://0.0.0.0:{{ sansible_kafka_port }}
{% endif %}

{% if sansible_kafka_aws_cluster_autodiscover_data is defined %}
advertised.listeners=PLAINTEXT://{{ sansible_kafka_aws_cluster_autodiscover_data_hostname }}:{{ sansible_kafka_port }}
{% elif sansible_kafka_advertised_host_name is defined %}
advertised.listeners=PLAINTEXT://{{ sansible_kafka_advertised_host_name }}:{{ sansible_kafka_port }}
{% endif %}

{# The number of threads handling network requests #}
num.network.threads={{ sansible_kafka_num_network_threads }}

# The number of threads doing disk I/O
num.io.threads={{ sansible_kafka_num_io_threads }}

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes={{ sansible_kafka_socket_send_buffer_bytes }}

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes={{ sansible_kafka_socket_receive_buffer_bytes }}

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes={{ sansible_kafka_socket_request_max_bytes }}


############################# Log Basics #############################

# A comma seperated list of directories under which to store log files
log.dirs={{ sansible_kafka_data_dir }}

auto.create.topics.enable={{ sansible_kafka_auto_create_topics }}
# The number of logical partitions per topic per server. More partitions allow greater parallelism
# for consumption, but also mean more files.
num.partitions={{ sansible_kafka_num_partitions }}

# Set the default replication factor, set to this to the number of kafka brokers in your cluster
default.replication.factor={{ sansible_kafka_default_replication_factor }}

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
log.flush.interval.messages={{ sansible_kafka_log_flush_interval_messages }}

# The maximum amount of time a message can sit in a log before we force a flush
log.flush.interval.ms={{ sansible_kafka_log_flush_interval_ms }}

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion
log.retention.hours={{ sansible_kafka_log_retention_hours }}

# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.bytes.
log.retention.bytes={{ sansible_kafka_log_retention_bytes }}

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes={{ sansible_kafka_log_segment_bytes }}

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=60000

# By default the log cleaner is disabled and the log retention policy will default to just delete segments after their retention expires.
# If log.cleaner.enable=true is set the cleaner will be enabled and individual logs can then be marked for log compaction.
log.cleaner.enable=false

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect={{ sansible_kafka_zookeeper_hosts | join(',') }}

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms={{ sansible_kafka_zookeeper_connection_timeout_ms }}
